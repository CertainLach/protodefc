use ::errors::*;
use ::ir::{Type, TypeVariant, TypeData, TypeContainer, FieldPropertyReference};
use ::ir::variant::{Variant, SimpleScalarVariant, ContainerVariant, ContainerField, ContainerFieldType, ArrayVariant, UnionVariant};
use super::*;

pub fn generate_size_of(typ: TypeContainer) -> Result<Block> {
    let typ_inner = typ.borrow();
    size_of_for_type(&*typ_inner)
        .size_of(&typ_inner.data)
}

fn size_of_for_type<'a>(typ: &'a Type) -> &'a BaseSizeOf {
    match typ.variant {
        Variant::SimpleScalar(ref inner) => inner,
        Variant::Container(ref inner) => inner,
        Variant::Array(ref inner) => inner,
        Variant::Union(ref inner) => inner,
        _ => unimplemented!(),
    }
}

trait BaseSizeOf: TypeVariant {
    fn size_of(&self, data: &TypeData) -> Result<Block>;
}

fn input_for(data: &TypeData) -> String {
    format!("type_input_{}", data.ident.unwrap())
}
fn input_for_type(typ: TypeContainer) -> String {
    let typ_inner = typ.borrow();
    input_for(&typ_inner.data)
}

impl BaseSizeOf for SimpleScalarVariant {

    fn size_of(&self, data: &TypeData) -> Result<Block> {
        let mut ops: Vec<Operation> = Vec::new();

        ops.push(Operation::AddCount(Expr::TypeCall {
            typ: CallType::SizeOf,
            type_name: data.name.clone().into(),
            input: input_for(data).into(),
        }));

        Ok(Block(ops))
    }

}

fn find_field_index(variant: &ContainerVariant, property: &FieldPropertyReference)
                    -> usize {
    let property_field_ident = {
        let rc = property.reference_node.clone().unwrap().upgrade().unwrap();
        let rc_inner = rc.borrow();
        rc_inner.data.ident.unwrap()
    };

    let (idx, _) = variant.fields
        .iter().enumerate()
        .find(|&(_, f)| {
            let rc = f.child.clone().upgrade().unwrap();
            let rc_inner = rc.borrow();
            rc_inner.data.ident.unwrap() == property_field_ident
        })
        .unwrap();

    idx
}

fn build_var_accessor(variant: &ContainerVariant, data: &TypeData,
                      field_num: usize) -> Result<Expr> {
    let field: &ContainerField = &variant.fields[field_num];

    match field.field_type {
        ContainerFieldType::Normal => {
            if variant.virt {
                Ok(Expr::Var(input_for(data).into()))
            } else {
                Ok(Expr::ContainerField {
                    value: Box::new(Expr::Var(input_for(data).into())),
                    field: field.name.clone(),
                })
            }
        }
        ContainerFieldType::Virtual { ref property } => {
            let next = if property.reference.up == 0 {
                let next_index = find_field_index(variant, property);
                build_var_accessor(variant, data, next_index)?
            } else {
                Expr::Var(input_for_type(property.reference_node.clone().unwrap()
                                         .upgrade().unwrap()).into())
            };
            let property = match property.property.as_ref() {
                "length" => Property::ArrayLength,
                "tag" => Property::UnionTag,
                prop => bail!("unknown property {:?}", prop),
            };
            Ok(Expr::PropertyAccess {
                value: Box::new(next),
                property: property,
            })
        }
        _ => unimplemented!(),
    }
}

impl BaseSizeOf for ContainerVariant {

    fn size_of(&self, data: &TypeData) -> Result<Block> {
        let mut ops: Vec<Operation> = Vec::new();

        for (idx, field) in self.fields.iter().enumerate() {
            let child_typ = field.child.upgrade().unwrap();
            let child_input_var = input_for_type(child_typ.clone());

            let field_accessor = build_var_accessor(self, data, idx)?;

            ops.push(Operation::Assign {
                name: child_input_var.into(),
                value: field_accessor,
            });
        }

        for field in self.fields.iter() {
            let child_typ = field.child.upgrade().unwrap();
            ops.push(Operation::Block(generate_size_of(child_typ)?));
        }

        Ok(Block(ops))
    }

}

impl BaseSizeOf for ArrayVariant {

    fn size_of(&self, data: &TypeData) -> Result<Block> {
        let mut ops: Vec<Operation> = Vec::new();

        let ident = data.ident.unwrap();
        let index_var = format!("array_{}_index", ident);

        let child_input_var = input_for_type(self.child.upgrade().unwrap());

        ops.push(Operation::ForEachArray {
            array: input_for(data).into(),
            index: index_var.clone().into(),
            typ: child_input_var.clone().into(),
            block: generate_size_of(self.child.upgrade().unwrap())?,
        });

        Ok(Block(ops))
    }

}

impl BaseSizeOf for UnionVariant {

    fn size_of(&self, data: &TypeData) -> Result<Block> {
        let mut ops: Vec<Operation> = Vec::new();

        Ok(Block(ops))
    }

}
