/// Types which can be used in properties.
///
/// Note that this does not include all target types supported by ProtoDef.
#[derive(Debug, PartialEq, Eq, Copy, Clone)]
pub enum TargetType {

    Integer,
    Bytes,

    /// Generated by the `union` variant
    Enum,

    Unknown,

}
impl TargetType {

    fn parse(&self, raw: &str) -> Option<TargetTypeValue> {
        let res = match *self {
            TargetType::Integer => {
                let parsed = match raw.parse() {
                    Err(_) => return None,
                    Ok(inner) => inner,
                };
                TargetTypeValue::Integer(parsed)
            }
            TargetType::Enum => TargetTypeValue::Enum(raw.into()),
            TargetType::Bytes => TargetTypeValue::Bytes(raw.to_owned().into_bytes()),
            TargetType::Unknown => return None,
        };
        Some(res)
    }

}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum TargetTypeValue {
    Integer(u64),
    Bytes(Vec<u8>),
    Enum(String),
}
impl TargetTypeValue {

    fn get_type(&self) -> TargetType {
        match *self {
            TargetTypeValue::Integer(_) => TargetType::Integer,
            TargetTypeValue::Bytes(_) => TargetType::Bytes,
            TargetTypeValue::Enum(_) => TargetType::Enum,
        }
    }

}
